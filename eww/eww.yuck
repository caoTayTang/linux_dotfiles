;; Created   by https://github.com/thyeun	
;; Designed  by https://github.com/thyeun
;; Maintaned by https://github.com/thyeun

;; put path to aesthetic bar config files here ;;
(defvar eww "$HOME/eww/target/release/eww -c $HOME/.config/eww")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;							Widget Section's							 ;;	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Launcher Widgets ;;
;; (defwidget launcher []
;; 	(box :orientation "h" 
;; 		 :space-evenly "false" 
;; 		 :spacing "-10"
;;   	(button :class "launcher_icon"
;; 			:tooltip "Start"
;; 			:onclick "rofi -modi drun,run -show drun"
;; 			:onrightclick "def-dmenu" "")))
;;
;; Workspaces Widgets ;;
(defwidget workspaces [] 
(literal :content workspace)) 
(deflisten workspace "scripts/workspace") 

;; Battery Widgets ;;
(defwidget bat []
	(box	:orientation "h"	
			:space-evenly "false"
			:spacing "4"
	(label	:class "bat"		
			:halign "end"		
			:text battery	
			:tooltip "Battery: ${battery-cappacity}%")))
(defpoll battery			:interval "1s"	"scripts/battery icon")
(defpoll battery-cappacity	:interval "1s"	"scripts/battery percent")

;;  Music ;; 
(defwidget music [] 
	(eventbox :onhover "${eww} update music_reveal=true"
			  :onhoverlost "${eww} update music_reveal=false"
	(box 	  :class "module-2" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
	(box 	  :class "song_cover_art" :spacing "10" :vexpand "false" :hexpand "false" :style "background-image: url('${cover_art}');")
	(button   :class "song" :onclick "~/.config/eww/scripts/popup music" song)
	(revealer :transition "slideright"
		      :reveal music_reveal
		      :duration "100ms"
    (box      :space-evenly "true" :vexpand "false" :hexpand "false" :orientation "h" 
    (button   :class "song_btn_prev" :onclick "~/.config/eww/scripts/music_info --prev" "")
	(button   :class "song_btn_play" :onclick "~/.config/eww/scripts/music_info --toggle" song_status)
	(button   :class "song_btn_next" :onclick "~/.config/eww/scripts/music_info --next" ""))))))
(defpoll song 			:interval "1s"  "~/.config/eww/scripts/music_info --song")
(defpoll song_artist 	:interval "1s"  "~/.config/eww/scripts/music_info --artist")
(defpoll current_status :interval "1s"  "~/.config/eww/scripts/music_info --ctime")
(defpoll song_status 	:interval "1s"  "~/.config/eww/scripts/music_info --status")
(defpoll cover_art 		:interval "1s"  "~/.config/eww/scripts/music_info --cover")
(defvar music_reveal false)

;;  Music ;;
(defwidget music_pop []
		(box 	:class "music_pop" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
		(box 	:class "music_cover_art" :vexpand "false" :hexpand "false" :style "background-image: url('${cover_art}');")
		(box 	:orientation "v" :spacing 10 :space-evenly "false" :vexpand "false" :hexpand "false"
		(label 	:halign "center" :class "music" :wrap "true" :limit-width "10" :text song)
		(label 	:halign "center" :class "music_artist" :wrap "true" :limit-width "10" :text song_artist)
		(box 	:orientation "h" :spacing 15 :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
		(button :class "music_btn_prev" :onclick "~/.config/eww/scripts/music_info --prev" "")
		(button :class "music_btn_play" :onclick "~/.config/eww/scripts/music_info --toggle" song_status)
		(button :class "music_btn_next" :onclick "~/.config/eww/scripts/music_info --next" ""))
		(box 	:class "music_bar" :halign "center" :vexpand "false" :hexpand "false" :space-evenly "false"
		(scale :onscroll "playerctl position {}%" :min 0 :active "true" :max 100 :value current_status
		)))))

;; Wifi Widgets ;;
(defwidget wifi []
	(box		:orientation "h"  
				:spacing "-10"
	(button		:onclick "scripts/popup wifi"
	            :tooltip wifi-name
				:class "wifi-icon" wifi-icon)))
(defpoll wifi-icon :interval "1s" "scripts/wifi icon")
(defpoll wifi-name :interval "1s" "scripts/wifi name")

;; Brightness Widgets ;;
(defwidget bright []
  (eventbox :onhover "${eww} update bright=true"   
  			:onhoverlost "${eww} update bright=false"
  			(box    :orientation "h"  
			  		:space-evenly "false"  
					:spacing "2"
					:vexpand "false" 
					:hexpand "false" 
  			(button   :onclick "scripts/popup light"
					  :class "brightness-icon" ""))))	   
(defpoll current-brightness :interval "1s" "brightnessctl g")
(defvar bright false)

(defwidget light []
	(box :class "light-box" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false"
	(box :halign "v" :space-evenly "false" :hexpand "false" :vexpand "false"
	(box :class "light_icon" :orientation "v")
	(box :orientation "v" :halign "center" :vexpand "false" :hexpand "false"
    (label :class "light_text" :text "Brightness" :valign "center" :halign "left" )
	(box :class "light_bar" :halign "center" :vexpand "false" :hexpand "false"
	(scale    :value current-brightness
              :space-evenly "false"
			  :orientation "h"
			  :onchange "brightnessctl set {}%"  
              :tooltip "Brightness: ${current-brightness}%"
			  :max 255
			  :min 0))))))
;;(defpoll current-brightness :interval "1s" "xbacklight -get") ;;   

;; Volume Widgets ;;
(defwidget volum []
	(eventbox :onhover "${eww} update volum=true" 		
			  :onhoverlost "${eww} update volum=false"
	(box      :orientation "h" 	  
			  :space-evenly "false" 
			  :spacing "2"
			  :vexpand "false" 
			  :hexpand "false" 
	(button   :onclick "scripts/popup audio"	
			  :class "volume-icon" "奔"))))
(defpoll current-volume :interval "1s" "amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defvar volum false)

(defwidget audio []
	(box :class "audio-box" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false"
	(box :halign "v" :space-evenly "false" :hexpand "false" :vexpand "false"
	(box :class "speaker_icon" :orientation "v")
	(box :orientation "v" :halign "center" :vexpand "false" :hexpand "false"
    (label :class "speaker_text" :text "Speaker" :valign "center" :halign "left" )
	(box :class "speaker_bar" :halign "center" :vexpand "false" :hexpand "false"
	(scale    :value current-volume
              :space-evenly "false"
			  :orientation "h"
			  :onchange "amixer -D pulse sset Master {}%" 
              :tooltip "Volume: ${current-volume}%"
			  :max 100
			  :min 0))))
    (label :text "" :class "audio_sep" :halign "center")
	(box :halign "v" :space-evenly "false" :hexpand "false" :vexpand "false"
	(box :class "mic_icon" :orientation "v")
	(box :orientation "v" :halign "center" :vexpand "false" :hexpand "false"
    (label :class "mic_text" :text "Mic" :valign "center" :halign "left" )
	(box :class "mic_bar" :halign "center" :vexpand "false" :hexpand "false"
	(scale    :value mic_percent
              :space-evenly "false"
			  :orientation "h"
              :tooltip "Mic: ${mic_percent}%"
			  :onchange "amixer -D pulse sset Capture {}%" 
			  :max 100
			  :min 0))))))
;;(defpoll current-volume :interval "1s" "amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'") ;;
(defpoll mic_percent :interval "1s" "amixer -D pulse sget Capture | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")

;; Control Panel Widgets ;;	
(defwidget control []
	(box :orientation "h" 
		 :space-evenly false  
		 :class "control"
(wifi)
(bat)
(bright)
(volum)))

;; Clock Widgets ;;
(defwidget time []
	(box	:orientation "h" 
			:class "time" 
			:halign "end"
	(button	:onclick "scripts/popup calendar"	
			:class "time-hour" hour)
	(button	:onclick "scripts/popup calendar"	
			:class "time-min" min)
	(button	:onclick "scripts/popup calendar"	
			:class "time-sec" sec)))
(defpoll hour	:interval "1s"	"date '+%H:'")
(defpoll min	:interval "1s"	"date '+%M:'")
(defpoll sec	:interval "1s"	"date '+%S '")

;; Calendar Widgets ;;
(defwidget cal []
	(box :class "cal-box" 
		 :orientation "h"
	(box :class "cal-inner-box"
	(calendar :class "cal" 
			  :day calendar_day 
			  :month calendar_month 
			  :year calendar_year))))
(defpoll calendar_day :interval "10h"
    "date '+%d'")
(defpoll calendar_month :interval "10h"
    "scripts/calendar")
(defpoll calendar_year :interval "10h"
    "date '+%Y'")

;; Powermenu Widgets ;;
(defwidget power []
	(eventbox	:onhover "${eww} update power=true"	
				:onhoverlost "${eww} update power=false" 
	(box		:orientation "h"					
				:space-evenly "false" 	 
				:hexpand "false" 	
				:class "powermenu"
	(revealer	:transition "slideleft"				
				:reveal power			 
				:duration "100ms"
	(box		:orientation "h"					
				:space-evenly "false"

	(button   	:class "button-bspres"  			
				:tooltip "i3 Restart" 
				:onclick "i3-msg restart" "" )

  	(button		:class "button-reb"					
	  			:tooltip "Reboot"		 
				:onclick "reboot"	"")

	(button		:class "button-quit" 				
				:tooltip "Logout" 		 
				:onclick "killall i3" "")

	(button		:class "button-lock" 				
				:tooltip "Lock Screen"	 
				:onclick "betterlockscreen -l"	"")))

	(button		:class "button-off"					
				:tooltip "Shutdown"		 
				:onclick "shutdown now"	""))))
(defvar power false)

;; Top Widgets ;;
(defwidget top []
	(box	:orientation "h" 
			:space-evenly "false" 
			:halign "start" 
;; (launcher)
(workspaces)
))

;; Bottom Widgets ;;
(defwidget bottom []
	(box	:orientation "h" 
			:space-evenly false 
(time)
(power)))

(defwidget center []
	(box :orientation "h" 
		 :space-evenly false  
         :halign "center"
		 :class "center_modules"
(music)))

;; End Widgets ;;
(defwidget end []
	(box :orientation "h" 
		 :space-evenly "false" 
		 :halign "end" 
		 :spacing 2
(control)
(bottom)))

;; Bar Widgets ;;
(defwidget bar []
	(box :class "eww_bar" 
		 :orientation "h" 
		 :vexpand "false" 
		 :hexpand "false"
(top)
(center)
(end)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;							Window Section's							 ;;	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Bar Windows ;;
(defwindow bar
	:geometry (geometry :x "0px" 
						:y "0px" 
						:height "3%" 
						:width "100%")
	:monitor 0					
	:reserve (struts :distance "0px" 
					 :side "top")
	:wm-ignore "false"
	:hexpand "false"
	:vexpand "false"
(bar))

;; Calendar Windows ;;
(defwindow calendar
	:geometry (geometry :x "1555px" 
						:y "35px" 
						:width "20px" 
						:height "20px")
(cal))

;; Audio Windows ;;
(defwindow audio_ctl
	:geometry (geometry :x "1670px" 
						:y "35px" 
                        :width "20px" 
						:height "20px")
(audio))

;; Brightness Windows ;;
(defwindow light_ctl
	:geometry (geometry :x "1700px" 
						:y "35px" 
                        :width "20px" 
						:height "25px")
(light))

;; music ;;
(defwindow music_win 
	:stacking "fg" 
	:focusable "false" 
	:monitor 0
    :geometry (geometry :x "0px" 
						:y "0px" 
						:width "20px" 
						:height "20px")
(music_pop))

